Last Lecture
1 Http Post
	<input placeholder="Enter title" #title>
	<input placeholder="Enter title" #body>
	<button (click)="onSend(title.value,body.value)>"
	.ts file
	onSend(mytitle,mybody){
		let obj={
			title:mytitle,
			body:mybody
		}
		this.service.Postdata(obj)
		.subscribe((response)=>{
			console.log(response)
		})
		
	}
	
	service.ts
	localhost:8080/api/
	Postdata(obj){
		return (this.http.post(`${this.url}/getEmp`,obj));
	}
	
2 Http Put

	div [hidden]="ishidden"
		id readonly [(ngModel)]="id"
		title [(ngModel)]="title"
		body [(ngModel)]="body"
		button (click)="onUpdate()">
	
	<td> button (click)="onEdit(item)">
	
	.ts file
	id,title,body
	
	onEdit(item){
		this.id=item.id;
		....
		this.ishidden=false;
	}
	
	onUpdate(){
		let obj={
			id:this.id,
			title:this.title,
			body:this.body
		}
		
		this.service.UpdateData(obj)
		.subscribe((response)=>{
			....
		})
	}
	
	.service.ts
	UpdateData(obj){
		return (this.http.put(`${this.url}/${obj.id}`,obj))
	}
	
	Deletedata(id){
		return (this.http.delete(`${this.url}/${id}`))
	}
	
3 Http Delete
		<button (click)="onDelete(item.id)">
		
		.ts file
		onDelete(id){
			this.service.Deletedata(id)
			.subscribe(response=>{
			.....
			},(myerror)=>{
				if(myerror.status>=400 && myerror<= 499){
					alert("Client side error")
				}
			})
			
		}
4 Error Handling

Today's Lecture
1 Routing
	- navigation from one component to the another component
2 Routing Steps
	1 Configure the route
	2 <router-outlet>
	3 Establish the link/navigate between 2 component
3 Static Routing
4 Empty Path=> It load a default component
	path:""
5 wild cart operator => 
6 Send parameter through routing


























